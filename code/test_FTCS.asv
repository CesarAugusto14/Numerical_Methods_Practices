clc; close all; clear variables; 
% Code for solving the Diffusion Equation in 1-D, by using the FTCS scheme
% on it. On it, we can check how it works for both kernelized an a for-loop
% version. Note that this thing is unstable, so I am forcing dt to fulfill
% the stability condition. 
%
% However, some values of dt are working properly, irrelevantly of the
% stability criteria! 

% Time and Space steps
a = 1; dx =  0.1;
%dt = dx^2/2/a*dx; 
dt = dx/20; % For some reason, this works!
% Time and space arrays:
t = 0:dt:0.5; x = 0:dx:1.5;

% Dimensions:
N = length(t); M = length(x);

% Boundary Conditions:
BC = [0 0];
% Creating matrix u:
u = zeros(N,M);
% Initial Conditions:
u(1, :) = 1.5*sin(pi*x);

%% Kernelized version:
kernel = [1, -2, 1];
tic
for n = 1:N
    u(:, 1) = BC(1); u(:, end) = BC(2);
    u(n+1,:) = u(n,:) + a*dt/(dx^2)*convn(u(n, :), kernel, 'same');
end
t1 = toc;

%% For-loop version
tic
u(:, 1) = BC(1); u(:, end) = BC(2);
for n = 1:N
    for i = 2:M-1
        u(n + 1, i) = u(n, i) + a*dt/dx^2*(u(n, i+1) - 2*u(n, i) + u(n, i-1));
    end
end
t2 = toc;

% PLOT
figure(1)
for i = 2:length(u)
    plot(x, u(i,:), 'ro-', 'LineWidth',3)
    grid on
    xlabel('x')
    ylabel('u(x,t)')
    set(gca, 'fontname','times', 'FontSize',15)
    ylim([0 2])
    title('Diffusion Equation solution')
    pause(1e-2)
    if norm(u(i,:) - u(i-1,:),2) <= 1e-5
        break
    end
end

fprintf('The Required time for the Kernelized version is %.4f s\n', t1)
fprintf('The Required time for the Loop version is %.4f s\n', t2)